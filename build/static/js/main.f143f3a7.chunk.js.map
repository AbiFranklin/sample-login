{"version":3,"sources":["Component/assets/images/logo.svg","Component/EmailLogIn.js","Component/Login.js","Component/Error.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","EmailLogIn","useState","email","setEmail","useEffect","values","queryString","parse","window","location","search","localStorage","setItem","redirect_uri","state","href","type","placeholder","onChange","e","preventDefault","target","value","onClick","axios","post","then","res","data","status","assign","message","catch","error","console","log","className","Login","code","setCode","submitCode","a","getItem","loginCode","deviceToken","access_token","id","token","Error","App","src","logo","alt","exact","path","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kFAAAA,EAAOC,QAAU,IAA0B,kC,wNCgD5BC,EA5CI,WAAO,IAAD,EACKC,mBAAS,IADd,mBACdC,EADc,KACPC,EADO,KAGrBC,qBAAU,WACN,IAAMC,EAASC,IAAYC,MAAMC,OAAOC,SAASC,QACjDC,aAAaC,QAAQ,WAAYP,EAAOQ,cACxCF,aAAaC,QAAQ,QAASP,EAAOS,SACtC,IA0BH,OACI,6BACI,uCACA,2BAAIN,OAAOC,SAASM,MACpB,qFACA,2BAAOC,KAAK,OAAOC,YAAY,wBAAwBC,SA7B9C,SAACC,GACdA,EAAEC,iBACFjB,EAASgB,EAAEE,OAAOC,OAClBX,aAAaC,QAAQ,QAASO,EAAEE,OAAOC,UA0B0C,6BAC7E,4BAAQC,QAxBI,WAChBC,IAAMC,KAAK,iDAAkD,CACzDvB,MAAOA,IAENwB,MAAK,SAAUC,IACY,IAApBA,EAAIC,KAAKC,OACTrB,OAAOC,SAASqB,OAAO,WAEvBnB,aAAaC,QAAQ,UAAWe,EAAIC,KAAKG,SACzCvB,OAAOC,SAASqB,OAAO,cAG9BE,OAAM,SAAUC,GACbC,QAAQC,IAAIF,OAWcG,UAAU,gBAAxC,c,wBCFGC,EAtCD,WAAO,IAAD,EACQpC,mBAAS,GADjB,mBACTqC,EADS,KACHC,EADG,KAQVC,EAAU,uCAAG,sBAAAC,EAAA,sEACTjB,IAAMC,KAAK,gDAAiD,CAC9DvB,MAAOS,aAAa+B,QAAQ,SAC5BC,UAAWL,EACXM,YAAa,uCAEZlB,MAAK,SAAUC,GACZ,IAAwB,IAApBA,EAAIC,KAAKC,OAAiB,CAC1B,IAAMgB,EAAelB,EAAIC,KAAKA,KAAKkB,GAAK,IAAMnB,EAAIC,KAAKA,KAAKmB,MAC5DvC,OAAOC,SAASqB,OAAhB,UAA0BnB,aAAa+B,QAAQ,YAA/C,kBAAoE/B,aAAa+B,QAAQ,SAAzF,yBAAkHG,EAAlH,4BAEAlC,aAAaC,QAAQ,UAAWe,EAAIC,KAAKG,SACzCvB,OAAOC,SAASqB,OAAO,eAG9BE,OAAM,SAAUC,GACbC,QAAQC,IAAIF,MAhBL,2CAAH,qDAoBhB,OACI,oCACI,iDACA,uDAA4B,2BAAItB,aAAa+B,QAAQ,UAArD,6DAEA,2BAAO1B,KAAK,OAAOC,YAAY,oBAAoBC,SA9B1C,SAACC,GACdA,EAAEC,iBACFmB,EAAQpB,EAAEE,OAAOC,UA4B4D,6BACzE,4BAAQc,UAAU,eAAeb,QAASiB,GAA1C,cCxBGQ,EAXD,WACV,OACI,oCACI,qCACA,2BAAIrC,aAAa+B,QAAQ,YACzB,4BAAQN,UAAU,eAAeb,QAAS,WAAQf,OAAOC,SAASqB,OAAO,SAAzE,a,iBCqBGmB,MAnBf,WACE,OACE,yBAAKb,UAAU,OACb,yBAAKA,UAAU,UAAS,yBAAKc,IAAKC,IAAMC,IAAI,UAC5C,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,UACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,UACV,kBAAC,EAAD,UCTUC,QACW,cAA7B/C,OAAOC,SAAS+C,UAEe,UAA7BhD,OAAOC,SAAS+C,UAEhBhD,OAAOC,SAAS+C,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtC,MAAK,SAAAuC,GACjCA,EAAaC,kB","file":"static/js/main.f143f3a7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.3ab4645f.svg\";","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport queryString from 'query-string';\n\nconst EmailLogIn = () => {\n    const [email, setEmail] = useState('');\n\n    useEffect(() => {\n        const values = queryString.parse(window.location.search);\n        localStorage.setItem('redirect', values.redirect_uri);\n        localStorage.setItem('state', values.state);\n    }, []);\n\n    const onChange = (e) => {\n        e.preventDefault();\n        setEmail(e.target.value);\n        localStorage.setItem('email', e.target.value);\n    }\n\n    const submitEmail = () => {\n        axios.post('https://api-v2.yacchat.com/api/v1/users/signin', {\n            email: email,\n        })\n            .then(function (res) {\n                if (res.data.status === true) {\n                    window.location.assign('/login');\n                } else {\n                    localStorage.setItem('message', res.data.message);\n                    window.location.assign('/error')\n                }\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n    }\n\n\n    return (\n        <div>\n            <h2>Sign In</h2>\n            <p>{window.location.href}</p>\n            <p>Use the email your team admin invited you to YAC with.</p>\n            <input type=\"text\" placeholder=\"Enter your work email\" onChange={onChange} /><br />\n            <button onClick={submitEmail} className='btn__primary'>Continue</button>\n        </div>\n    );\n}\n\nexport default EmailLogIn;","import React, { useState } from 'react';\nimport axios from 'axios';\n\nconst Login = () => {\n    const [code, setCode] = useState(0);\n\n    const onChange = (e) => {\n        e.preventDefault();\n        setCode(e.target.value);\n    }\n\n    const submitCode = async () => {\n        await axios.post('https://api-v2.yacchat.com/api/v1/users/login', {\n            email: localStorage.getItem('email'),\n            loginCode: code,\n            deviceToken: \"fireBaseToken Generated For Device\"\n        })\n            .then(function (res) {\n                if (res.data.status === true) {\n                    const access_token = res.data.data.id + \"!\" + res.data.data.token;\n                    window.location.assign(`${localStorage.getItem('redirect')}#state=${localStorage.getItem('state')}&access_token=${access_token}&token_type=Bearer`);\n                } else {\n                    localStorage.setItem('message', res.data.message);\n                    window.location.assign('../error')\n                }\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n    }\n\n    return (\n        <>\n            <h1>Verify Your Email</h1>\n            <p>We just sent an email to <b>{localStorage.getItem('email')}</b>.\n            Enter your 6 digit verification code below to continue.</p>\n            <input type='text' placeholder='Verification Code' onChange={onChange} /><br />\n            <button className='btn__primary' onClick={submitCode}>Continue</button>\n        </>);\n}\n\nexport default Login;\n","import React from 'react'\n\nconst Error = () => {\n    return (\n        <>\n            <h1>Error</h1>\n            <p>{localStorage.getItem('message')}</p>\n            <button className='btn__primary' onClick={() => { window.location.assign('../') }}>\n                Go Back\n            </button>\n        </>);\n}\n\nexport default Error;","import React from 'react';\nimport './App.css';\nimport { Switch, Route } from 'react-router-dom';\nimport EmailLogIn from './Component/EmailLogIn';\nimport Login from './Component/Login';\nimport Error from './Component/Error';\nimport logo from './Component/assets/images/logo.svg'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className='header'><img src={logo} alt='logo' /></div>\n      <Switch>\n        <Route exact path=\"/\">\n          <EmailLogIn />\n        </Route>\n        <Route path=\"/login\">\n          <Login />\n        </Route>\n        <Route path=\"/error\">\n          <Error />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}